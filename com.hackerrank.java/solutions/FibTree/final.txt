


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;


public class Solution  {

 public static java.io.InputStream input = System.in;
 public static java.io.PrintStream output = System.out;
 public static void log (final Object msg) {
 output.println(msg);
 }


	public enum OPERATION_TYPE {
		Q, U;
	}

	public static class Operation {
		OPERATION_TYPE type;
		public Node X;
		public Node Y;
		public int K;

		@Override
		public String toString () {
			return this.type + "(X=" + name(this.X) + " Y=" + name(this.Y) + " K=" + this.K + ")";
		}

	}

	public static void main (final String[] args) {
		final Scanner in = new Scanner(input);
		final int numberOfNodes = in.nextInt();
		final int numberOfOperations = in.nextInt();
// log(Fibonacci.valueOf(100));
// log(numberOfOperations);
		final BinaryTree tree = new BinaryTree(numberOfNodes);

		for (int i = 0; i < numberOfNodes - 1; i++) {
			final int nodeArrayIndex = i + 1;
			final int nodeIndex = BinaryTree.toNodeIndex(nodeArrayIndex);
			final int nodeParentIndex = in.nextInt();

			tree.connect(nodeIndex, nodeParentIndex);
		}
// tree.normalize();
// tree.print();

		for (int i = 0; i < numberOfOperations; i++) {
			final Operation operation = new Operation();

			final String operationName = in.next();
			operation.type = OPERATION_TYPE.valueOf(operationName);
			if (operation.type == OPERATION_TYPE.Q) {
				{
					final int nodeIndex = in.nextInt();
					final Node n = tree.getNode(nodeIndex);
					operation.X = n;
				}
				{
					final int nodeIndex = in.nextInt();
					final Node n = tree.getNode(nodeIndex);
					operation.Y = n;
				}
			} else {
				{
					final int nodeIndex = in.nextInt();
					final Node n = tree.getNode(nodeIndex);
					operation.X = n;
				}
				{
					final int K = in.nextInt();
					operation.K = K;

				}
			}

			if (operation.type == OPERATION_TYPE.Q) {
				final Path path = tree.findPath(operation.X, operation.Y);
				final Long pathValue = path.getPathValue();
				log(rest(pathValue));
			} else if (operation.type == OPERATION_TYPE.U) {
				tree.update(operation.X, operation.K);
// tree.print();
			}

//
		}

	}

	private static Long rest (final Long pathValue) {
		return pathValue % MODULO();
	}

	public static int MODULO () {
		if (MODULO == null) {
			MODULO = 1000000007;
		}
		return MODULO;
	}

	public static Integer MODULO = null;

	static class BinaryTree {
		final Node[] nodes;

		public BinaryTree (final int numberOfNodes) {
			this.nodes = new Node[numberOfNodes];
			for (int i = 0; i < numberOfNodes; i++) {
				this.nodes[i] = new Node(BinaryTree.toNodeIndex(i) + "");
			}
		}

		public void update (final Node x, final int k) {
			if (x == null) {
				return;
			}
			x.value = x.value + (Fibonacci.valueOf(k));
			this.update(x.childLeft, k + 1);
			this.update(x.childRight, k + 1);
// for (int i = 0; i < x.children.size(); i++) {
// final Node child = x.children.get(i);
// this.update(child, k + 1);
// }
		}

		public void normalize () {
			for (int i = 0; i < this.nodes.length; i++) {
				final Node node = this.nodes[i];
				node.normalize();
			}
		}

		final HashMap<String, Path> knownPaths = new HashMap<String, Path>();

		public Path findPath (final Node x, final Node y) {
			final Path result = new Path();

			if (x == y) {
				result.addState(x);
				return result;
			}

			final LinkedList<Node> stepsX = new LinkedList<Node>();
			final Vector<Node> stepsY = new Vector<Node>();
// final HashSet<Node> visited = new HashSet<Node>();

			stepsX.add(x);
			stepsY.add(y);
// visited.add(x);
// visited.add(y);
			final boolean pathFound = false;
			while (!pathFound) {
				{
					final Node lastX = stepsX.getLast();
					if (stepsY.contains(lastX)) {
						result.addAll(stepsX);
						final int start = stepsY.indexOf(lastX);
						for (int i = start + 1; i < stepsY.size(); i++) {
							result.addState(stepsY.get(i));
						}
						return result;
					}
					final Node xParent = lastX.parent;
					if (xParent != null) {
						stepsX.add(xParent);
					}
				}
				{
					final Node lastY = stepsY.get(0);
					if (stepsX.contains(lastY)) {
						final int end = stepsX.indexOf(lastY);
						for (int i = 0; i < end; i++) {
							result.addState(stepsX.get(i));
						}
						result.addAll(stepsY);
						return result;
					}
					final Node yParent = lastY.parent;
					if (yParent != null) {
						stepsY.insertElementAt(yParent, 0);
					}
				}

			}

		}

		private String pathName (final Node x, final Node y) {
			return x.name + ":" + y.name;
		}

// private boolean findPath (final Node x, final Node y, final Path currentPath) {
// final ArrayList<Node> directions = x.neighbours;
// for (int i = 0; i < directions.size(); i++) {
// final Node candidate = directions.get(i);
// if (candidate == y) {
// currentPath.addState(y);
// return true;
// }
// if (currentPath.contains(candidate)) {
// continue;
// } else {
// currentPath.addState(candidate);
// final boolean success = this.findPath(candidate, y, currentPath);
// if (success) {
// return true;
// } else {
// currentPath.removeState(candidate);
// continue;
// }
// }
// }
// return false;
// }

		public Node getNode (final int nodeIndex) {
			return this.nodes[BinaryTree.toArrayIndex(nodeIndex)];
		}

		public void print () {
			log(Arrays.toString(this.nodes));
		}

		public void connect (final int nodeIndex, final int nodeParentIndex) {

			final int nodeParentArrayIndex = BinaryTree.toArrayIndex(nodeParentIndex);
			final int nodeArrayIndex = BinaryTree.toArrayIndex(nodeIndex);

			this.nodes[nodeArrayIndex].parent = this.nodes[nodeParentArrayIndex];
			if (this.nodes[nodeParentArrayIndex].childLeft == null) {
				this.nodes[nodeParentArrayIndex].childLeft = this.nodes[nodeArrayIndex];
			} else if (this.nodes[nodeParentArrayIndex].childRight == null) {
				this.nodes[nodeParentArrayIndex].childRight = this.nodes[nodeArrayIndex];
			} else {
				throw new Error();
			}
		}

		public static int toArrayIndex (final int i) {
			return i - 1;
		}

		public static int toNodeIndex (final int i) {
			return i + 1;
		}
	}

	public static String name (final Node child) {
		if (child == null) {
			return "";
		}
		return child.name;
	}

	static class Node {
		private final String name;

		public Node (final String name) {
			this.name = name;
		}

		public void normalize () {
// this.neighbours.clear();
// this.children.clear();
// Node.addNeighbour(this.childLeft, this.neighbours);
// Node.addNeighbour(this.childRight, this.neighbours);
// Node.addNeighbour(this.parent, this.neighbours);
//
// Node.addNeighbour(this.childLeft, this.children);
// Node.addNeighbour(this.childRight, this.children);

		}

		static private void addNeighbour (final Node candicate, final ArrayList<Node> list) {
			if (candicate != null) {
				list.add(candicate);
			}
		}

// final ArrayList<Node> neighbours = new ArrayList<Node>();
// final ArrayList<Node> children = new ArrayList<Node>();

		Node parent;
		Node childLeft;
		Node childRight;

		public Long value = 0L;

// @Override
// public String toString () {
// return "Node(" + this.name + ") L=" + name(this.childLeft) + " R=" + name(this.childRight) + " parent="
// + name(this.parent) + ">";
// }

		@Override
		public String toString () {
			return "Node(" + this.name + ") " + this.value;
		}

	}

	static class Path {
		final ArrayList<Node> steps = new ArrayList<Node>();
		private Long value;

		@Override
		public String toString () {
			return "Path" + this.steps + "";
		}

		public void addState (final Node x) {
			this.steps.add(x);
		}

		public void addAll (final List<Node> steps) {
			this.steps.addAll(steps);
		}

		public Long getPathValue () {

			this.value = 0L;
			for (int i = 0; i < this.steps.size(); i++) {
				final Node step = this.steps.get(i);
				this.value = step.value + (this.value);
// this.value = rest(this.value);
			}

			return this.value;
		}

		public void print () {
			log("path : " + this.steps);
		}

		public void removeState (final Node candidate) {
			this.steps.remove(candidate);
		}

		public boolean contains (final Node candidate) {
			return this.steps.contains(candidate);
		}
	}

	public static final class Fibonacci {
		public static int N = MODULO();

		public static Long valueOf (final int k) {
			return values[k];
		}

		
		static Long[] values = new Long[] {0x1L, 0x1L, 0x1L, 0x2L, 0x3L, 0x5L, 0x8L, 0xdL, 0x15L, 0x22L, 0x37L, 0x59L, 0x90L, 0xe9L,
			0x179L, 0x262L, 0x3dbL, 0x63dL, 0xa18L, 0x1055L, 0x1a6dL, 0x2ac2L, 0x452fL, 0x6ff1L, 0xb520L, 0x12511L, 0x1da31L,
			0x2ff42L, 0x4d973L, 0x7d8b5L, 0xcb228L, 0x148addL, 0x213d05L, 0x35c7e2L, 0x5704e7L, 0x8cccc9L, 0xe3d1b0L, 0x1709e79L,
			0x2547029L, 0x3c50ea2L, 0x6197ecbL, 0x9de8d6dL, 0xff80c38L, 0x19d699a5L, 0x29cea5ddL, 0x80a757bL, 0x31d91b58L,
			0x39e390d3L, 0x3021e224L, 0x2e6aa8f0L, 0x22f1c10dL, 0x15c19ff6L, 0x38b36103L, 0x12da36f2L, 0xff2cdeeL, 0x22cd04e0L,
			0x32bfd2ceL, 0x19f20da7L, 0x1117166eL, 0x2b092415L, 0x85707cL, 0x2b8e9491L, 0x2c14050dL, 0x1c07cf97L, 0xc810a9dL,
			0x2888da34L, 0x3509e4d1L, 0x21f7f4feL, 0x1b670fc8L, 0x1c43abfL, 0x1d2b4a87L, 0x1eef8546L, 0x8005c6L, 0x1f6f8b0cL,
			0x1fef90d2L, 0x3c451d7L, 0x23b3e2a9L, 0x27783480L, 0xf914d22L, 0x370981a2L, 0xb0004bdL, 0x66ebc58L, 0x116ec115L,
			0x17dd7d6dL, 0x294c3e82L, 0x58ef1e8L, 0x2edb306aL, 0x346a2252L, 0x27aa88b5L, 0x2079e100L, 0xc899faeL, 0x2d0380aeL,
			0x398d205cL, 0x2af5d703L, 0x28e82d58L, 0x18433a54L, 0x5909da5L, 0x1dd3d7f9L, 0x2364759eL, 0x59d8390L, 0x2901f92eL,
			0x2e9f7cbeL, 0x1c06abe5L, 0xf0b5e9cL, 0x2b120a81L, 0x3a1d691dL, 0x2994a997L, 0x281748adL, 0x1611283dL, 0x28da6e3L,
			0x189ecf20L, 0x1b2c7603L, 0x33cb4523L, 0x135cf11fL, 0xb8d6c3bL, 0x1eea5d5aL, 0x2a77c995L, 0xdc75ce8L, 0x383f267dL,
			0xa6bb95eL, 0x71015d4L, 0x117bcf32L, 0x188be506L, 0x2a07b438L, 0x6f8cf37L, 0x3100836fL, 0x37f952a6L, 0x2d5f0c0eL,
			0x29bd94adL, 0x1b81d6b4L, 0x9a4a15aL, 0x2526780eL, 0x2ecb1968L, 0x1856c76fL, 0xb8716d0L, 0x23ddde3fL, 0x2f64f50fL,
			0x17a80947L, 0xb72344fL, 0x231a3d96L, 0x2e8c71e5L, 0x160be574L, 0x8fd8d52L, 0x1f0972c6L, 0x28070018L, 0xb75a8d7L,
			0x337ca8efL, 0x35787bfL, 0x36d430aeL, 0x3a2bb86dL, 0x35651f14L, 0x33f60d7aL, 0x2dc06287L, 0x261ba5faL, 0x18413e7aL,
			0x2c21a6dL, 0x1b0358e7L, 0x1dc57354L, 0x38c8cc3bL, 0x1af37588L, 0x182177bcL, 0x3314ed44L, 0xf9b9af9L, 0x715be36L,
			0x16b1592fL, 0x1dc71765L, 0x34787094L, 0x16a4bdf2L, 0xf82647fL, 0x26272271L, 0x35a986f0L, 0x2035df5aL, 0x1a449c43L,
			0x3a7a7b9dL, 0x19244dd9L, 0x1803ff6fL, 0x31284d48L, 0xd9182b0L, 0x31f05f1L, 0x10b088a1L, 0x13cf8e92L, 0x24801733L,
			0x384fa5c5L, 0x2134f2f1L, 0x1de9ceafL, 0x383f799L, 0x216dc648L, 0x24f1bde1L, 0xac4ba22L, 0x2fb67803L, 0x3a7b3225L,
			0x2e96e021L, 0x2d77483fL, 0x20735e59L, 0x124fdc91L, 0x32c33aeaL, 0x9784d74L, 0xa0be57L, 0xa190bcbL, 0xab9ca22L,
			0x14d2d5edL, 0x1f8ca00fL, 0x345f75fcL, 0x18514c04L, 0x1115f7f9L, 0x296743fdL, 0x3a7d3bf6L, 0x2849b5ecL, 0x272c27dbL,
			0x13db13c0L, 0x3b073b9bL, 0x13478554L, 0x12b3f6e8L, 0x25fb7c3cL, 0x38af7324L, 0x23102559L, 0x2024ce76L, 0x79a29c8L,
			0x27bef83eL, 0x2f592206L, 0x1b7d503dL, 0xf3ba83cL, 0x2ab8f879L, 0x39f4a0b5L, 0x2912cf27L, 0x276ca5d5L, 0x14e4aaf5L,
			0xb686c3L, 0x159b31b8L, 0x1651b87bL, 0x2becea33L, 0x6a3d8a7L, 0x3290c2daL, 0x39349b81L, 0x302a9454L, 0x2dc465ceL,
			0x2254301bL, 0x147dcbe2L, 0x36d1fbfdL, 0xfb4fdd8L, 0xaec2fceL, 0x1aa12da6L, 0x258d5d74L, 0x493c113L, 0x2a211e87L,
			0x2eb4df9aL, 0x1d3b341aL, 0x105549adL, 0x2d907dc7L, 0x24afd6dL, 0x2fdb7b34L, 0x322678a1L, 0x266729ceL, 0x1cf2d868L,
			0x7bf382fL, 0x24b21097L, 0x2c7148c6L, 0x15888f56L, 0x65f0e15L, 0x1be79d6bL, 0x2246ab80L, 0x2937ee4L, 0x24da2a64L,
			0x276da948L, 0x10ad09a5L, 0x381ab2edL, 0xd2cf28bL, 0x9acdb71L, 0x16d9cdfcL, 0x2086a96dL, 0x37607769L, 0x1c4c56cfL,
			0x18120431L, 0x345e5b00L, 0x10d5952aL, 0x9992623L, 0x1a6ebb4dL, 0x2407e170L, 0x2dbd2b6L, 0x26e3b426L, 0x29bf86dcL,
			0x150870fbL, 0x32d2dd0L, 0x18359ecbL, 0x1b62cc9bL, 0x33986b66L, 0x13606dfaL, 0xb5e0f59L, 0x1ebe7d53L, 0x2a1c8cacL,
			0xd403ff8L, 0x375ccca4L, 0x9024295L, 0x4c44532L, 0xdc687c7L, 0x128accf9L, 0x205154c0L, 0x32dc21b9L, 0x1792ac72L,
			0xed40424L, 0x2666b096L, 0x353ab4baL, 0x20069b49L, 0x19a685fcL, 0x39ad2145L, 0x17b8dd3aL, 0x15cb3478L, 0x2d8411b2L,
			0x7b47c23L, 0x35388dd5L, 0x1523ff1L, 0x368acdc6L, 0x37dd0db7L, 0x32cd1176L, 0x2f0f5526L, 0x26419c95L, 0x19b627b4L,
			0x45cfa42L, 0x1e1321f6L, 0x22701c38L, 0x4e87427L, 0x2758905fL, 0x2c410486L, 0x17fecadeL, 0x8a5055dL, 0x20a3d03bL,
			0x2948d598L, 0xe51dbccL, 0x379ab164L, 0xa51c329L, 0x651aa86L, 0x10a36dafL, 0x16f51835L, 0x279885e4L, 0x2f2d412L,
			0x2a8b59f6L, 0x2d7e2e08L, 0x1c6ebdf7L, 0xe5221f8L, 0x2ac0dfefL, 0x391301e7L, 0x283917cfL, 0x25b14fafL, 0x124f9d77L,
			0x3800ed26L, 0xeb5c096L, 0xb1be3b5L, 0x19d1a44bL, 0x24ed8800L, 0x3246244L, 0x2811ea44L, 0x2b364c88L, 0x17ad6cc5L,
			0x748ef46L, 0x1ef65c0bL, 0x263f4b51L, 0x99add55L, 0x2fda28a6L, 0x397505fbL, 0x2db4649aL, 0x2b8ea08eL, 0x1da83b21L,
			0xd9c11a8L, 0x2b444cc9L, 0x38e05e71L, 0x2889e133L, 0x25cf759dL, 0x12be8cc9L, 0x388e0266L, 0xfb1c528L, 0xca4fd87L,
			0x1c56c2afL, 0x28fbc036L, 0x9b7b8deL, 0x32b37914L, 0xd067ebL, 0x3383e0ffL, 0x345448eaL, 0x2c3d5fe2L, 0x24f6dec5L,
			0x159974a0L, 0x3a905365L, 0x148efdfeL, 0x1384875cL, 0x2813855aL, 0x3b980cb6L, 0x2810c809L, 0x280e0ab8L, 0x148408baL,
			0xf7496bL, 0x157b5225L, 0x16729b90L, 0x2bededb5L, 0x6c5bf3eL, 0x32b3acf3L, 0x39796c31L, 0x30924f1dL, 0x2e70f147L,
			0x2368765dL, 0x163e9d9dL, 0x39a713faL, 0x144ae790L, 0x12573183L, 0x26a21913L, 0x38f94a96L, 0x240099a2L, 0x215f1a31L,
			0x9c4e9ccL, 0x2b2403fdL, 0x34e8edc9L, 0x247227bfL, 0x1dc04b81L, 0x697a939L, 0x2457f4baL, 0x2aef9df3L, 0x13acc8a6L,
			0x3019c92L, 0x16ae6538L, 0x19b001caL, 0x305e6702L, 0xe739ec5L, 0x3373bc0L, 0x11aada85L, 0x14e21645L, 0x268cf0caL,
			0x3b6f070fL, 0x26612dd2L, 0x26356adaL, 0x10fbcea5L, 0x3731397fL, 0xc923e1dL, 0x828ad95L, 0x14baebb2L, 0x1ce39947L,
			0x319e84f9L, 0x12e75439L, 0x8eb0f2bL, 0x1bd26364L, 0x24bd728fL, 0x4f50becL, 0x29b27e7bL, 0x2ea78a67L, 0x1cbf3edbL,
			0xfcbff3bL, 0x2c8b3e16L, 0xbc734aL, 0x2d47b160L, 0x2e0424aaL, 0x1fb10c03L, 0x121a66a6L, 0x31cb72a9L, 0x84b0f48L,
			0x3a1681f1L, 0x6c6c732L, 0x5427f1cL, 0xc09464eL, 0x114bc56aL, 0x1d550bb8L, 0x2ea0d122L, 0x105b12d3L, 0x36119eeL,
			0x13bc2cc1L, 0x171d46afL, 0x2ad97370L, 0x65bf018L, 0x31356388L, 0x379153a0L, 0x2d2bed21L, 0x292276baL, 0x1ab399d4L,
			0x83b4687L, 0x22eee05bL, 0x2b2a26e2L, 0x127e3d36L, 0x20d9a11L, 0x148bd747L, 0x16997158L, 0x2b25489fL, 0x623eff0L,
			0x3149388fL, 0x376d287fL, 0x2d1b9707L, 0x28edf57fL, 0x1a6ec27fL, 0x7c1edf7L, 0x2230b076L, 0x29f29e6dL, 0x108884dcL,
			0x3a7b2349L, 0xf68de1eL, 0xe493760L, 0x1db2157eL, 0x2bfb4cdeL, 0xe129855L, 0x3a0de533L, 0xc85b381L, 0xaf8ceadL,
			0x177e822eL, 0x227750dbL, 0x39f5d309L, 0x20d259ddL, 0x1f2d62dfL, 0x464f2b5L, 0x23925594L, 0x27f74849L, 0xfeed3d6L,
			0x37e61c1fL, 0xc3a25eeL, 0x8857806L, 0x14bf9df4L, 0x1d4515faL, 0x3204b3eeL, 0x13aeffe1L, 0xa18e9c8L, 0x1dc7e9a9L,
			0x27e0d371L, 0xa0df313L, 0x31eec684L, 0x61ef90L, 0x3250b614L, 0x32b2a5a4L, 0x296891b1L, 0x20806d4eL, 0xe4e34f8L,
			0x2ecea246L, 0x1820d37L, 0x3050af7dL, 0x31d2bcb4L, 0x2688a22aL, 0x1cc094d7L, 0x7ae6cfaL, 0x246f01d1L, 0x2c1d6ecbL,
			0x14f1a695L, 0x5744b59L, 0x1a65f1eeL, 0x1fda3d47L, 0x3a402f35L, 0x1e7fa275L, 0x1d2507a3L, 0x9e011L, 0x1d2ee7b4L,
			0x1d38c7c5L, 0x3a67af79L, 0x1c05ad37L, 0x1ad292a9L, 0x36d83fe0L, 0x16100882L, 0x114d7e5bL, 0x275d86ddL, 0x38ab0538L,
			0x246dc20eL, 0x217dfd3fL, 0xa50f546L, 0x2bcef285L, 0x361fe7cbL, 0x26541049L, 0x20d92e0dL, 0xb92744fL, 0x2c6ba25cL,
			0x37fe16abL, 0x28ceef00L, 0x25323ba4L, 0x1266609dL, 0x37989c41L, 0xe6432d7L, 0xa620511L, 0x18c637e8L, 0x23283cf9L,
			0x53aadaL, 0x237be7d3L, 0x23cf92adL, 0xbb0b079L, 0x2f804326L, 0x3b30f39fL, 0x2f166cbeL, 0x2eac9656L, 0x2228390dL,
			0x153a055cL, 0x37623e69L, 0x110179beL, 0xcc8ee20L, 0x1dca67deL, 0x2a9355feL, 0xcc2f3d5L, 0x375649d3L, 0x87e73a1L,
			0x439f36dL, 0xcb8670eL, 0x10f25a7bL, 0x1daac189L, 0x2e9d1c04L, 0x10ad1386L, 0x3af6583L, 0x145c7909L, 0x180bde8cL,
			0x2c685795L, 0x8d96c1aL, 0x3541c3afL, 0x28065c2L, 0x37c22971L, 0x3a428f33L, 0x3669ee9dL, 0x3511b3c9L, 0x2fe0d85fL,
			0x2957c221L, 0x1d9dd079L, 0xb5ac893L, 0x28f8990cL, 0x3453619fL, 0x21b130a4L, 0x1a69c83cL, 0x802ed9L, 0x1ae9f715L,
			0x1b6a25eeL, 0x36541d03L, 0x162378eaL, 0x10dccbe6L, 0x270044d0L, 0x37dd10b6L, 0x23428b7fL, 0x1f84d22eL, 0x72c93a6L,
			0x26b165d4L, 0x2dddf97aL, 0x18f49547L, 0xb37c4baL, 0x242c5a01L, 0x2f641ebbL, 0x17f5aeb5L, 0xbbf0369L, 0x23b4b21eL,
			0x2f73b587L, 0x178d9d9eL, 0xb66891eL, 0x22f426bcL, 0x2e5aafdaL, 0x15b40c8fL, 0x873f262L, 0x1e27fef1L, 0x269bf153L,
			0x929263dL, 0x2fc51790L, 0x38ee3dcdL, 0x2d188b56L, 0x2a6bff1cL, 0x1be9c06bL, 0xabaf580L, 0x26a4b5ebL, 0x315fab6bL,
			0x1c69974fL, 0x122e78b3L, 0x2e981002L, 0x52bbeaeL, 0x33c3ceb0L, 0x38ef8d5eL, 0x31189207L, 0x2e6d555eL, 0x23eb1d5eL,
			0x16bda8b5L, 0x3aa8c613L, 0x15cba4c1L, 0x14d9a0cdL, 0x2aa5458eL, 0x3e41c54L, 0x2e8961e2L, 0x326d7e36L, 0x255c1611L,
			0x1c2eca40L, 0x5f0164aL, 0x221ee08aL, 0x280ef6d4L, 0xe930d57L, 0x36a2042bL, 0x99a477bL, 0x4a1819fL, 0xe3bc91aL,
			0x12dd4ab9L, 0x211913d3L, 0x33f65e8cL, 0x1974a858L, 0x11d03cddL, 0x2b44e535L, 0x17a580bL, 0x2cbf3d40L, 0x2e39954bL,
			0x1f5e0884L, 0x11fcd3c8L, 0x315adc4cL, 0x7bce60dL, 0x3917c259L, 0x539de5fL, 0x2b6d6b1L, 0x7f0b510L, 0xaa78bc1L,
			0x129840d1L, 0x1d3fcc92L, 0x2fd80d63L, 0x117d0feeL, 0x5ba534aL, 0x17376338L, 0x1cf1b682L, 0x342919baL, 0x15800635L,
			0xe0e55e8L, 0x238e5c1dL, 0x319cb205L, 0x1990441bL, 0xf922c19L, 0x29227034L, 0x38b49c4dL, 0x263c427aL, 0x235614c0L,
			0xdf78d33L, 0x314da1f3L, 0x3aa651fL, 0x34f80712L, 0x38a26c31L, 0x31ffa93cL, 0x2f074b66L, 0x256c2a9bL, 0x18d8abfaL,
			0x2aa0c8eL, 0x1b82b888L, 0x1e2cc516L, 0x39af7d9eL, 0x1c4178adL, 0x1a562c44L, 0x3697a4f1L, 0x1553072eL, 0x104fe218L,
			0x25a2e946L, 0x35f2cb5eL, 0x1ffaea9dL, 0x1a52ebf4L, 0x3a4dd691L, 0x1905f87eL, 0x17b90508L, 0x30befd86L, 0xcdd3887L,
			0x2016c06L, 0xedea48dL, 0x10e01093L, 0x1fbeb520L, 0x309ec5b3L, 0x14c2b0ccL, 0x9c6ac78L, 0x1e895d44L, 0x285009bcL,
			0xb3e9cf9L, 0x338ea6b5L, 0x33279a7L, 0x36c1205cL, 0x39f39a03L, 0x3519f058L, 0x3372c054L, 0x2cf1e6a5L, 0x24c9dcf2L,
			0x1620f990L, 0x3aead682L, 0x1571060bL, 0x14c11286L, 0x2a321891L, 0x3586110L, 0x2d8a79a1L, 0x30e2dab1L, 0x22d28a4bL,
			0x181a9af5L, 0x3aed2540L, 0x176cf62eL, 0x16bf5167L, 0x2e2c4795L, 0x950cef5L, 0x377d168aL, 0x5331b78L, 0x11567fbL,
			0x6488373L, 0x75deb6eL, 0xda66ee1L, 0x15045a4fL, 0x22aac930L, 0x37af237fL, 0x1ebf22a8L, 0x1ad37c20L, 0x39929ec8L,
			0x18cb50e1L, 0x16c325a2L, 0x2f8e7683L, 0xab6d21eL, 0x3a4548a1L, 0x96150b8L, 0x80bcf52L, 0x116d200aL, 0x1978ef5cL,
			0x2ae60f66L, 0x8c434bbL, 0x33aa4421L, 0xd3aed5L, 0x347df2f6L, 0x3551a1cbL, 0x2e34cabaL, 0x27eba27eL, 0x1a85a331L,
			0x6d67ba8L, 0x215c1ed9L, 0x28329a81L, 0xdf3ef53L, 0x362689d4L, 0x87faf20L, 0x30b6eedL, 0xb8b1e0dL, 0xe968cfaL,
			0x1a21ab07L, 0x28b83801L, 0x73f1901L, 0x2ff75102L, 0x37366a03L, 0x2b92f0feL, 0x272e90faL, 0x1726b7f1L, 0x2ba7ee4L,
			0x19e136d5L, 0x1c9bb5b9L, 0x367cec8eL, 0x177dd840L, 0x125ffac7L, 0x29ddd307L, 0xa303c7L, 0x2a80d6ceL, 0x2b23da95L,
			0x1a09e75cL, 0x992f7eaL, 0x239cdf46L, 0x2d2fd730L, 0x1531ec6fL, 0x6c6f998L, 0x1bf8e607L, 0x22bfdf9fL, 0x31dfb9fL,
			0x25dddb3eL, 0x28fbd6ddL, 0x133ee814L, 0x9ff4eaL, 0x13dedcfeL, 0x147ed1e8L, 0x285daee6L, 0x141b6c7L, 0x299f65adL,
			0x2ae11c74L, 0x18e5b81aL, 0x82c0a87L, 0x2111c2a1L, 0x293dcd28L, 0xeb4c5c2L, 0x37f292eaL, 0xb0c8ea5L, 0x7645788L,
			0x1270e62dL, 0x19d53db5L, 0x2c4623e2L, 0xa809790L, 0x36c6bb72L, 0x5ac88fbL, 0xd87a66L, 0x6850361L, 0x75d7dc7L,
			0xde28128L, 0x153ffeefL, 0x23228017L, 0x38627f06L, 0x1fea3516L, 0x1cb1ea15L, 0x1015524L, 0x1db33f39L, 0x1eb4945dL,
			0xcd098fL, 0x1f819decL, 0x204ea77bL, 0x4357b60L, 0x248422dbL, 0x28b99e3bL, 0x11a2f70fL, 0x3a5c954aL, 0x1064c252L,
			0xf268d95L, 0x1f8b4fe7L, 0x2eb1dd7cL, 0x12a2635cL, 0x5b976d1L, 0x185bda2dL, 0x1e1550feL, 0x36712b2bL, 0x18ebb222L,
			0x13c21346L, 0x2cadc568L, 0x4d50ea7L, 0x3182d40fL, 0x3657e2b6L, 0x2c3fecbeL, 0x26fd056dL, 0x17a22824L, 0x304638aL,
			0x1aa68baeL, 0x1daaef38L, 0x38517ae6L, 0x1a61a017L, 0x171850f6L, 0x3179f10dL, 0xcf777fcL, 0x2d69f02L, 0xfce16feL,
			0x12a4b600L, 0x2272ccfeL, 0x351782feL, 0x1bef85f5L, 0x156c3eecL, 0x315bc4e1L, 0xb2d39c6L, 0xee34a0L, 0xc1b6e66L,
			0xd09a306L, 0x1925116cL, 0x262eb472L, 0x3b8fbd7L, 0x29e7b049L, 0x2da0ac20L, 0x1bed9262L, 0xdf3747bL, 0x29e106ddL,
			0x37d47b58L, 0x261ab82eL, 0x2254697fL, 0xcd457a6L, 0x2f28c125L, 0x624ec4L, 0x2f8b0fe9L, 0x2fed5eadL, 0x23dda48fL,
			0x18303935L, 0x7313bdL, 0x18a34cf2L, 0x191660afL, 0x31b9ada1L, 0xf354449L, 0x55427e3L, 0x14896c2cL, 0x19dd940fL,
			0x2e67003bL, 0xca9ca43L, 0x3b10ca7eL, 0xc1fcabaL, 0xb95cb31L, 0x17b595ebL, 0x234b611cL, 0x3b00f707L, 0x22b18e1cL,
			0x2217bb1cL, 0x92e7f31L, 0x2b463a4dL, 0x3474b97eL, 0x242029c4L, 0x1cfa193bL, 0x57f78f8L, 0x22799233L, 0x27f90b2bL,
			0xed7d357L, 0x36d0de82L, 0xa0de7d2L, 0x543fc4dL, 0xf51e41fL, 0x1495e06cL, 0x23e7c48bL, 0x387da4f7L, 0x20ca9f7bL,
			0x1dad7a6bL, 0x2dd4fdfL, 0x208aca4aL, 0x23681a29L, 0x8581a6cL, 0x2bc03495L, 0x34184f01L, 0x243db98fL, 0x1cbb3e89L,
			0x55e2e11L, 0x22196c9aL, 0x27779aabL, 0xdf63d3eL, 0x356dd7e9L, 0x7c94b20L, 0x19c5902L, 0x965a422L, 0xb01fd24L,
			0x1467a146L, 0x1f699e6aL, 0x33d13fb0L, 0x17a01413L, 0xfd689bcL, 0x27769dcfL, 0x374d278bL, 0x2328fb53L, 0x1edb58d7L,
			0x6698a23L, 0x2544e2faL, 0x2bae6d1dL, 0x15588610L, 0x56c2926L, 0x1ac4af36L, 0x2030d85cL, 0x3af58792L, 0x1f8b95e7L,
			0x1ee65372L, 0x2d71f52L, 0x21bd72c4L, 0x24949216L, 0xab73ad3L, 0x2f4bcce9L, 0x3a0307bcL, 0x2db40a9eL, 0x2c1c4853L,
			0x1e3588eaL, 0xeb70736L, 0x2cec9020L, 0x8cd4fL, 0x2cf55d6fL, 0x2cfe2abeL, 0x1e58be26L, 0xfbc1eddL, 0x2e14dd03L,
			0x23631d9L, 0x304b0edcL, 0x328140b5L, 0x2731858aL, 0x1e17fc38L, 0x9aeb7bbL, 0x27c6b3f3L, 0x31756baeL, 0x1da1559aL,
			0x137bf741L, 0x311d4cdbL, 0x8fe7a15L, 0x3a1bc6f0L, 0x77f76feL, 0x60073e7L, 0xd7feae5L, 0x13805eccL, 0x210049b1L,
			0x3480a87dL, 0x19e62827L, 0x12cc069dL, 0x2cb22ec4L, 0x3e36b5aL, 0x30959a1eL, 0x34790578L, 0x2973d58fL, 0x22521100L,
			0x102b1c88L, 0x327d2d88L, 0x70d8009L, 0x398aad91L, 0x4fd6393L, 0x2ed471dL, 0x7eaaab0L, 0xad7f1cdL, 0x12c29c7dL,
			0x1d9a8e4aL, 0x305d2ac7L, 0x125cef0aL, 0x71f4fcaL, 0x197c3ed4L, 0x209b8e9eL, 0x3a17cd72L, 0x1f189209L, 0x1d959574L,
			0x1135d76L, 0x1ea8f2eaL, 0x1fbc5060L, 0x2ca7943L, 0x2286c9a3L, 0x255142e6L, 0xc3d4282L, 0x318e8568L, 0x230fde3L,
			0x33bf834bL, 0x35f0812eL, 0x2e153a72L, 0x286af199L, 0x1ae56204L, 0x7b58996L, 0x229aeb9aL, 0x2a507530L, 0x115096c3L,
			0x641ecL, 0x1156d8afL, 0x115d1a9bL, 0x22b3f34aL, 0x34110de5L, 0x1b2a3728L, 0x13a07b06L, 0x2ecab22eL, 0x6d0632dL,
			0x359b155bL, 0xd0ae81L, 0x366bc3dcL, 0x373c725dL, 0x320d6c32L, 0x2daf1488L, 0x2421b6b3L, 0x16360134L, 0x3a57b7e7L,
			0x14f2ef14L, 0x13afdcf4L, 0x28a2cc08L, 0xb7def5L, 0x295aaafdL, 0x2a1289f2L, 0x17d26ae8L, 0x64a2ad3L, 0x1e1c95bbL,
			0x2466c08eL, 0x6e88c42L, 0x2b4f4cd0L, 0x3237d912L, 0x21ec5bdbL, 0x18896ae6L, 0x3a75c6c1L, 0x176467a0L, 0x163f645aL,
			0x2da3cbfaL, 0x848664dL, 0x35ec3247L, 0x299ce8dL, 0x388600d4L, 0x3b1fcf61L, 0x380b062eL, 0x37900b88L, 0x340047afL,
			0x2ff58930L, 0x285b06d8L, 0x1cb5c601L, 0x97602d2L, 0x262bc8d3L, 0x2fa1cba5L, 0x1a32ca71L, 0xe39cc0fL, 0x286c9680L,
			0x36a6628fL, 0x23782f08L, 0x1e83c790L, 0x6612c91L, 0x24e4f421L, 0x2b4620b2L, 0x14904accL, 0x43ba177L, 0x18cbec43L,
			0x1d078dbaL, 0x35d379fdL, 0x17403db0L, 0x1178eda6L, 0x28b92b56L, 0x3a3218fcL, 0x27507a4bL, 0x25e7c940L, 0x119d7984L,
			0x378542c4L, 0xd87f241L, 0x9726afeL, 0x16fa5d3fL, 0x206cc83dL, 0x3767257cL, 0x1c3923b2L, 0x18057f27L, 0x343ea2d9L,
			0x10a957f9L, 0x94d30cbL, 0x19f688c4L, 0x2343b98fL, 0x19f784cL, 0x24e331dbL, 0x2682aa27L, 0xfcb11fbL, 0x364dbc22L,
			0xa7e0416L, 0x530f631L, 0xfaefa47L, 0x14dff078L, 0x248eeabfL, 0x396edb37L, 0x2262fbefL, 0x20370d1fL, 0x6ff3f07L,
			0x27364c26L, 0x2e358b2dL, 0x19d10d4cL, 0xc6bce72L, 0x263cdbbeL, 0x32a8aa30L, 0x1d4abbe7L, 0x14589c10L, 0x31a357f7L,
			0xa612a00L, 0x69b7f0L, 0xacae1f0L, 0xb3499e0L, 0x15ff7bd0L, 0x213415b0L, 0x37339180L, 0x1cccdd29L, 0x1865a4a2L,
			0x353281cbL, 0x11fd5c66L, 0xb95142aL, 0x1d927090L, 0x292784baL, 0xb1f2b43L, 0x3446affdL, 0x3cb1139L, 0x3811c136L,
			0x420868L, 0x3853c99eL, 0x3895d206L, 0x354ed19dL, 0x3249d99cL, 0x2bfde132L, 0x22acf0c7L, 0x131007f2L, 0x35bcf8b9L,
			0xd3236a4L, 0x7546556L, 0x14869bfaL, 0x1bdb0150L, 0x30619d4aL, 0x10a1d493L, 0x568a7d6L, 0x160a7c69L, 0x1b73243fL,
			0x317da0a8L, 0x1155fae0L, 0x738d181L, 0x188ecc61L, 0x1fc79de2L, 0x38566a43L, 0x1c833e1eL, 0x193ede5aL, 0x35c21c78L,
			0x136630cbL, 0xd8d833cL, 0x20f3b407L, 0x2e813743L, 0x13da2143L, 0x6c08e7fL, 0x1a9aafc2L, 0x215b3e41L, 0x5b23fcL,
			0x21b6623dL, 0x22118639L, 0x82d1e6fL, 0x2a3ea4a8L, 0x326bc317L, 0x210f9db8L, 0x17e096c8L, 0x38f03480L, 0x15360141L,
			0x128b6bbaL, 0x27c16cfbL, 0x3a4cd8b5L, 0x26737ba9L, 0x25258a57L, 0xffe3bf9L, 0x3523c650L, 0x9873842L, 0x310348bL,
			0xc976ccdL, 0xfa7a158L, 0x1c3f0e25L, 0x2be6af7dL, 0xc8af39bL, 0x3871a318L, 0x961ccacL, 0x638a5bdL, 0xf9a7269L,
			0x15d31826L, 0x256d8a8fL, 0x3b40a2b5L, 0x2513633dL, 0x24b93bebL, 0xe31d521L, 0x32eb110cL, 0x5821c26L, 0x386d2d32L,
			0x2547f51L, 0x3ac1ac83L, 0x17b61cdL, 0xa24449L, 0x21da616L, 0x2bfea5fL, 0x4dd9075L, 0x79d7ad4L, 0xc7b0b49L, 0x1418861dL,
			0x20939166L, 0x34ac1783L, 0x19a4dee2L, 0x12b62c5eL, 0x2c5b0b40L, 0x3766d97L, 0x2fd178d7L, 0x3347e66eL, 0x277e953eL,
			0x1f2bb1a5L, 0xb0f7cdcL, 0x2a3b2e81L, 0x354aab5dL, 0x23eb0fd7L, 0x1d9af12dL, 0x5eb36fdL, 0x2386282aL, 0x29715f27L,
			0x115cbd4aL, 0x3ace1c71L, 0x10900fb4L, 0xfc3621eL, 0x205371d2L, 0x3016d3f0L, 0x14cf7bbbL, 0x94b85a4L, 0x1e1b015fL,
			0x27668703L, 0x9e6be5bL, 0x314d455eL, 0x3b3403b9L, 0x30e67f10L, 0x307fb8c2L, 0x25cb6dcbL, 0x1ab05c86L, 0x4e1004aL,
			0x1f915cd0L, 0x24725d1aL, 0x868efe3L, 0x2cdb4cfdL, 0x35443ce0L, 0x2684bfd6L, 0x202e32afL, 0xb18287eL, 0x2b465b2dL,
			0x365e83abL, 0x260a14d1L, 0x20cdce75L, 0xb3d193fL, 0x2c0ae7b4L, 0x374800f3L, 0x27b81ea0L, 0x2365558cL, 0xf82aa25L,
			0x32e7ffb1L, 0x6cfdfcfL, 0x39b7df80L, 0x4ecf548L, 0x30a0ac1L, 0x7f70009L, 0xb010acaL, 0x12f80ad3L, 0x1df9159dL,
			0x30f12070L, 0x134f6c06L, 0x8a5c26fL, 0x1bf52e75L, 0x249af0e4L, 0x4f55552L, 0x29904636L, 0x2e859b88L, 0x1c7b17b7L,
			0xf65e938L, 0x2be100efL, 0x3b46ea27L, 0x2b8d210fL, 0x2b39412fL, 0x1b2b9837L, 0xaca0f5fL, 0x25f5a796L, 0x30bfb6f5L,
			0x1b1a9484L, 0x103f8172L, 0x2b5a15f6L, 0x3b999768L, 0x2b58e357L, 0x2b57b0b8L, 0x1b15ca08L, 0xad2b0b9L, 0x25e87ac1L,
			0x30bb2b7aL, 0x1b08dc34L, 0x10293da7L, 0x2b3219dbL, 0x3b5b5782L, 0x2af2a756L, 0x2ab334d1L, 0x1a0b1220L, 0x9237ceaL,
			0x232e8f0aL, 0x2c520bf4L, 0x13e5d0f7L, 0x49d12e4L, 0x1882e3dbL, 0x1d1ff6bfL, 0x35a2da9aL, 0x17280752L, 0x113017e5L,
			0x28581f37L, 0x3988371cL, 0x26458c4cL, 0x2432f961L, 0xeddbba6L, 0x3310b507L, 0x653a6a6L, 0x39645badL, 0x41d384cL,
			0x1e6c9f2L, 0x604023eL, 0x7eacc30L, 0xdeece6eL, 0x15d99a9eL, 0x23c8690cL, 0x39a203aaL, 0x21cfa2afL, 0x1fd6dc52L,
			0x60bb4faL, 0x25e2914cL, 0x2bee4646L, 0x16360d8bL, 0x68989caL, 0x1cbf9755L, 0x2349211fL, 0x46dee6dL, 0x27b70f8cL,
			0x2c24fdf9L, 0x1841437eL, 0x8cb7770L, 0x210cbaeeL, 0x29d8325eL, 0xf4a2345L, 0x392255a3L, 0xcd1aee1L, 0xa593a7dL,
			0x172ae95eL, 0x218423dbL, 0x38af0d39L, 0x1e98670dL, 0x1bacaa3fL, 0x3a45114cL, 0x1a56f184L, 0x190138c9L, 0x33582a4dL,
			0x10be990fL, 0x87bf955L, 0x193a9264L, 0x21b68bb9L, 0x3af11e1dL, 0x210cdfcfL, 0x206333e5L, 0x5d549adL, 0x26387d92L,
			0x2c0dc73fL, 0x16ab7acaL, 0x71e7802L, 0x1dc9f2ccL, 0x24e86aceL, 0x7179393L, 0x2bfffe61L, 0x331791f4L, 0x237cc64eL,
			0x1af98e3bL, 0x2db8a82L, 0x1dd518bdL, 0x20b0a33fL, 0x2eaf1f5L, 0x239b9534L, 0x26868729L, 0xe875256L, 0x350dd97fL,
			0x7fa61ceL, 0x16d7146L, 0x967d314L, 0xad5445aL, 0x143d176eL, 0x1f125bc8L, 0x334f7336L, 0x16c704f7L, 0xe7bae26L,
			0x2542b31dL, 0x33be6143L, 0x1d664a59L, 0x1589e195L, 0x32f02beeL, 0xcdf437cL, 0x434a563L, 0x1113e8dfL, 0x15488e42L,
			0x265c7721L, 0xa3b5cL, 0x2666b27dL, 0x2670edd9L, 0x113cd64fL, 0x37adc428L, 0xd4fd070L, 0x962ca91L, 0x16b29b01L,
			0x20156592L, 0x36c80093L, 0x1b429c1eL, 0x166fd2aaL, 0x31b26ec8L, 0xc87776bL, 0x29f1c2cL, 0xf269397L, 0x11c5afc3L,
			0x20ec435aL, 0x32b1f31dL, 0x18036c70L, 0xf1a9586L, 0x271e01f6L, 0x3638977cL, 0x21bbcf6bL, 0x1c599ce0L, 0x27aa244L,
			0x1ed43f24L, 0x214ee168L, 0x4885685L, 0x25d737edL, 0x2a5f8e72L, 0x149bfc58L, 0x360c0c3L, 0x17fcbd1bL, 0x1b5d7ddeL,
			0x335a3af9L, 0x131ceed0L, 0xadc5fc2L, 0x1df94e92L, 0x28d5ae54L, 0xb3432dfL, 0x3409e133L, 0x3a34a0bL, 0x37ad2b3eL,
			0x3b507549L, 0x3762d680L, 0x371881c2L, 0x32e08e3bL, 0x2e5e45f6L, 0x25a40a2aL, 0x18678619L, 0x270c63cL, 0x1ad84c55L,
			0x1d491291L, 0x38215ee6L, 0x19cfa770L, 0x16563c4fL, 0x3025e3bfL, 0xae15607L, 0x3b0739c6L, 0xa4dc5c6L, 0x9ba3585L,
			0x1407fb4bL, 0x1dc230d0L, 0x31ca2c1bL, 0x13f192e4L, 0xa20f4f8L, 0x1e1287dcL, 0x28337cd4L, 0xaab3aa9L, 0x32deb77dL,
			0x1ef281fL, 0x34cddf9cL, 0x36bd07bbL, 0x2ff01d50L, 0x2b125b04L, 0x1f67ae4dL, 0xedf3f4aL, 0x2e46ed97L, 0x18b62daL,
			0x2fd25071L, 0x315db34bL, 0x259539b5L, 0x1b5822f9L, 0x55292a7L, 0x20aab5a0L, 0x25fd4847L, 0xb0d33e0L, 0x310a7c27L,
			0x7ce600L, 0x31876227L, 0x32044827L, 0x27f0e047L, 0x1e5a5e67L, 0xab074a7L, 0x290ad30eL, 0x33bb47b5L, 0x212b50bcL,
			0x194bce6aL, 0x3a771f26L, 0x18282389L, 0x170478a8L, 0x2f2c9c31L, 0xa964ad2L, 0x39c2e703L, 0x8be67ceL, 0x6e684caL,
			0xfa4ec98L, 0x168b7162L, 0x26305dfaL, 0x1210555L, 0x2751634fL, 0x287268a4L, 0x142901ecL, 0x100a089L, 0x1529a275L,
			0x162a42feL, 0x2b53e573L, 0x5e35e6aL, 0x313743ddL, 0x371aa247L, 0x2cb71c1dL, 0x2836f45dL, 0x19534673L, 0x5ef70c9L,
			0x1f42b73cL, 0x25322805L, 0x8da153aL, 0x2e0c3d3fL, 0x36e65279L, 0x2957c5b1L, 0x24a34e23L, 0x126049cdL, 0x370397f0L,
			0xdc917b6L, 0x931e59fL, 0x16fafd55L, 0x202ce2f4L, 0x3727e049L, 0x1bb9f936L, 0x17470f78L, 0x330108aeL, 0xead4e1fL,
			0x6138cc6L, 0x14c0dae5L, 0x1ad467abL, 0x2f954290L, 0xecee034L, 0x2c958bdL, 0x119838f1L, 0x146191aeL, 0x25f9ca9fL,
			0x3a5b5c4dL, 0x24ba5ce5L, 0x237aef2bL, 0xc9a8209L, 0x30157134L, 0x1152936L, 0x312a9a6aL, 0x323fc3a0L, 0x27cf9403L,
			0x1e748d9cL, 0xaa95798L, 0x291de534L, 0x33c73cccL, 0x214a57f9L, 0x1976cabeL, 0x3ac122b7L, 0x189d236eL, 0x17c37c1eL,
			0x30609f8cL, 0xc8951a3L, 0x14f2728L, 0xdd878cbL, 0xf279ff3L, 0x1d0018beL, 0x2c27b8b1L, 0xd8d0768L, 0x39b4c019L,
			0xba6fd7aL, 0x9c0f38cL, 0x1567f106L, 0x1f28e492L, 0x3490d598L, 0x181ef023L, 0x1114fbb4L, 0x2933ebd7L, 0x3a48e78bL,
			0x27e2095bL, 0x269026dfL, 0x12d76633L, 0x39678d12L, 0x10a4293eL, 0xe70ec49L, 0x1f151587L, 0x2d8601d0L, 0x11004d50L,
			0x2eb8519L, 0x13ebd269L, 0x16d75782L, 0x2ac329ebL, 0x5ffb766L, 0x30c2e151L, 0x36c298b7L, 0x2beab001L, 0x27127eb1L,
			0x176264abL, 0x2da1955L, 0x1a3c7e00L, 0x1d169755L, 0x37531555L, 0x18cee2a3L, 0x14872df1L, 0x2d561094L, 0x642747eL,
			0x33988512L, 0x39daf990L, 0x31d8b49bL, 0x3018e424L, 0x2656ceb8L, 0x1ad4e8d5L, 0x590ed86L, 0x2065d65bL, 0x25f6c3e1L,
			0xac1d035L, 0x30b89416L, 0x3b7a644bL, 0x30982e5aL, 0x3077c89eL, 0x25752cf1L, 0x1a522b88L, 0x42c8e72L, 0x1e7eb9faL,
			0x22ab486cL, 0x58f385fL, 0x283a80cbL, 0x2dc9b92aL, 0x1a696feeL, 0xc985f11L, 0x2701ceffL, 0x339a2e10L, 0x1f013308L,
			0x17009711L, 0x3601ca19L, 0x11679723L, 0xbce9735L, 0x1d362e58L, 0x2904c58dL, 0xaa029deL, 0x33a4ef6bL, 0x2aa4f42L,
			0x364f3eadL, 0x38f98defL, 0x33ae0295L, 0x310cc67dL, 0x291fff0bL, 0x1e91fb81L, 0xc173085L, 0x2aa92c06L, 0x36c05c8bL,
			0x25cebe8aL, 0x20f4510eL, 0xb284591L, 0x2c1c969fL, 0x3744dc30L, 0x27c6a8c8L, 0x2370baf1L, 0xf9c99b2L, 0x330d54a3L,
			0x70f244eL, 0x3a1c78f1L, 0x590d338L, 0x4128222L, 0x9a3555aL, 0xdb5d77cL, 0x17592cd6L, 0x250f0452L, 0xcd6721L,
			0x25dc6b73L, 0x26a9d294L, 0x10eb7400L, 0x37954694L, 0xce5f08dL, 0x8e06d1aL, 0x15c65da7L, 0x1ea6cac1L, 0x346d2868L,
			0x17792922L, 0x104b8783L, 0x27c4b0a5L, 0x38103828L, 0x243a1ec6L, 0x20af8ce7L, 0x94ee1a6L, 0x29fe6e8dL, 0x334d5033L,
			0x21b0f4b9L, 0x19637ae5L, 0x3b146f9eL, 0x18dd207cL, 0x1856c613L, 0x3133e68fL, 0xdefe29bL, 0x388ff23L, 0x1178e1beL,
			0x1501e0e1L, 0x267ac29fL, 0x3b7ca380L, 0x265c9c18L, 0x263e7591L, 0x110047a2L, 0x373ebd33L, 0xca43aceL, 0x8482dfaL,
			0x14ec68c8L, 0x1d3496c2L, 0x3220ff8aL, 0x13bacc45L, 0xa4101c8L, 0x1dfbce0dL, 0x283ccfd5L, 0xa9dd3dbL, 0x32daa3b0L,
			0x1ddad84L, 0x34b85134L, 0x3695feb8L, 0x2fb385e5L, 0x2aaeba96L, 0x1ec77674L, 0xddb6703L, 0x2ca2dd77L, 0x3a7e447aL,
			0x2b8657eaL, 0x2a69d25dL, 0x1a556040L, 0x9246896L, 0x2379c8d6L, 0x2c9e316cL, 0x147d303bL, 0x58097a0L, 0x19fdc7dbL,
			0x1f7e5f7bL, 0x397c2756L, 0x1d5fbccaL, 0x1b411a19L, 0x38a0d6e3L, 0x184726f5L, 0x154d33d1L, 0x2d945ac6L, 0x746c490L,
			0x34db1f56L, 0x8719dfL, 0x35623935L, 0x35e95314L, 0x2fb0c242L, 0x29ff4b4fL, 0x1e15438aL, 0xc79c4d2L, 0x2a8f085cL,
			0x3708cd2eL, 0x25fd0b83L, 0x216b0eaaL, 0xbcd5026L, 0x2d385ed0L, 0x3905aef6L, 0x2aa343bfL, 0x280e28aeL, 0x1716a266L,
			0x38a010dL, 0x1aa0a373L, 0x1e2aa480L, 0x38cb47f3L, 0x1b5b226cL, 0x188ba058L, 0x33e6c2c4L, 0x10d79915L, 0x92391d2L,
			0x19fb2ae7L, 0x231ebcb9L, 0x17f1d99L, 0x249dda52L, 0x261cf7ebL, 0xf200836L, 0x353d0021L, 0x8c23e50L, 0x264746aL,
			0xb26b2baL, 0xd8b2724L, 0x18b1d9deL, 0x263d0102L, 0x35410d9L, 0x299111dbL, 0x2ce522b4L, 0x1adb6a88L, 0xc25c335L,
			0x27012dbdL, 0x3326f0f2L, 0x1e8d54a8L, 0x16197b93L, 0x34a6d03bL, 0xf2581c7L, 0x83187fbL, 0x175709c2L, 0x1f8891bdL,
			0x36df9b7fL, 0x1acd6335L, 0x161234adL, 0x30df97e2L, 0xb570288L, 0x9bd063L, 0xbf2d2ebL, 0xc8ea34eL, 0x18817639L,
			0x25101987L, 0x1f6c5b9L, 0x2706df40L, 0x28fda4f9L, 0x1469ba32L, 0x1cc9524L, 0x16364f56L, 0x1802e47aL, 0x2e3933d0L,
			0xaa14e43L, 0x38da8213L, 0x7e1064fL, 0x520be5bL, 0xd01c4aaL, 0x12228305L, 0x1f2447afL, 0x3146cab4L, 0x14d0485cL,
			0xa7c4909L, 0x1f4c9165L, 0x29c8da6eL, 0xd7aa1ccL, 0x37437c3aL, 0x92353ffL, 0x4cc0632L, 0xdef5a31L, 0x12bb6063L,
			0x20aaba94L, 0x33661af7L, 0x18760b84L, 0x10415c74L, 0x28b767f8L, 0x38f8c46cL, 0x2615625dL, 0x23735cc2L, 0xdedf518L,
			0x316151daL, 0x3b47cebL, 0x3515cec5L, 0x38ca4bb0L, 0x3245506eL, 0x2f74d217L, 0x261f587eL, 0x19f9608eL, 0x47def05L,
			0x1e774f93L, 0x22f53e98L, 0x5d1c424L, 0x28c702bcL, 0x2e98c6e0L, 0x1bc4ff95L, 0xec2fc6eL, 0x2a87fc03L, 0x394af871L,
			0x28382a6dL, 0x25e858d7L, 0x1285b93dL, 0x386e1214L, 0xf59014aL, 0xc2c4957L, 0x1b854aa1L, 0x27b193f8L, 0x79c1492L,
			0x2f4da88aL, 0x36e9bd1cL, 0x2a9c9b9fL, 0x25eb8eb4L, 0x14ed604cL, 0x3ad8ef00L, 0x142b8545L, 0x1369aa3eL, 0x27952f83L,
			0x3afed9c1L, 0x26f93f3dL, 0x265d4ef7L, 0x11bbc42dL, 0x38191324L, 0xe3a0d4aL, 0xab85667L, 0x18f263b1L, 0x23aaba18L,
			0x10253c2L, 0x24ad0ddaL, 0x25af619cL, 0xec1a56fL, 0x3471070bL, 0x797e273L, 0x6e1f77L, 0x80601eaL, 0x8742161L,
			0x107a234bL, 0x18ee44acL, 0x296867f7L, 0x6bbe29cL, 0x30244a93L, 0x36e02d2fL, 0x2b69adbbL, 0x26af10e3L, 0x167df497L,
			0x1923b73L, 0x1810300aL, 0x19a26b7dL, 0x31b29b87L, 0xfba3cfdL, 0x5d20e7dL, 0x158c4b7aL, 0x1b5e59f7L, 0x30eaa571L,
			0x10ae3561L, 0x5fe10cbL, 0x16ac462cL, 0x1caa56f7L, 0x33569d23L, 0x14662a13L, 0xc21fd2fL, 0x20882742L, 0x2caa2471L,
			0x119781acL, 0x2a6dc16L, 0x143e5dc2L, 0x16e539d8L, 0x2b23979aL, 0x66e076bL, 0x31919f05L, 0x37ffa670L, 0x2df67b6eL,
			0x2a5b57d7L, 0x1cb7093eL, 0xb77970eL, 0x282ea04cL, 0x33a6375aL, 0x203a0d9fL, 0x18457af2L, 0x387f8891L, 0x152a397cL,
			0x120ef806L, 0x27393182L, 0x39482988L, 0x24e69103L, 0x2293f084L, 0xbdfb780L, 0x2e73a804L, 0x3a535f84L, 0x2d2c3d81L,
			0x2be4d2feL, 0x1d764678L, 0xdc04f6fL, 0x2b3695e7L, 0x38f6e556L, 0x2892b136L, 0x25eecc85L, 0x12e6b3b4L, 0x38d58039L,
			0x102169e6L, 0xd5c2018L, 0x1d7d89feL, 0x2ad9aa16L, 0xcbc6a0dL, 0x37961423L, 0x8b7b429L, 0x4b2fe45L, 0xd6ab26eL,
			0x121db0b3L, 0x1f886321L, 0x31a613d4L, 0x1593aceeL, 0xb9ef6bbL, 0x2132a3a9L, 0x2cd19a64L, 0x12697406L, 0x3a04463L,
			0x1609b869L, 0x19a9fcccL, 0x2fb3b535L, 0xdc2e7faL, 0x1dbd328L, 0xf9ebb22L, 0x117a8e4aL, 0x2119496cL, 0x3293d7b6L,
			0x1812571bL, 0xf0b64caL, 0x271dbbe5L, 0x362920afL, 0x21ac128dL, 0x1c3a6935L, 0x24bb1bbL, 0x1e861af0L, 0x20d1ccabL,
			0x3bd1d94L, 0x248eea3fL, 0x284c07d3L, 0x1140280bL, 0x398c2fdeL, 0xf318de2L, 0xd22f3b9L, 0x1c54819bL, 0x29777554L,
			0xa312ce8L, 0x33a8a23cL, 0x23f051dL, 0x35e7a759L, 0x3826ac76L, 0x327389c8L, 0x2eff6c37L, 0x25d82bf8L, 0x193cce28L,
			0x37a3019L, 0x1cb6fe41L, 0x20312e5aL, 0x14d6294L, 0x217e90eeL, 0x22cbf382L, 0x8afba69L, 0x2b7badebL, 0x342b6854L,
			0x240c4c38L, 0x1c9cea85L, 0x50e6cb6L, 0x21ab573bL, 0x26b9c3f1L, 0xcca5125L, 0x33841516L, 0x4b39c34L, 0x3837b14aL,
			0x1508377L, 0x398834c1L, 0x3ad8b838L, 0x38c622f2L, 0x38041123L, 0x352f6a0eL, 0x3198b12aL, 0x2b2d5131L, 0x212b3854L,
			0x10bdbf7eL, 0x31e8f7d2L, 0x70bed49L, 0x38f4e51bL, 0x466085dL, 0x1c02371L, 0x6262bceL, 0x7e64f3fL, 0xe0c7b0dL,
			0x15f2ca4cL, 0x23ff4559L, 0x39f20fa5L, 0x22568af7L, 0x20add095L, 0x7699185L, 0x2817621aL, 0x2f80f39fL, 0x1bfd8bb2L,
			0xfe3b54aL, 0x2be140fcL, 0x2a2c3fL, 0x2c0b6d3bL, 0x2c35997aL, 0x1ca63caeL, 0xd410c21L, 0x29e748cfL, 0x372854f0L,
			0x2574d3b8L, 0x21025ea1L, 0xadc6852L, 0x2bdec6f3L, 0x36bb2f45L, 0x26ff2c31L, 0x221f916fL, 0xd83f399L, 0x2fa38508L,
			0x18cae9aL, 0x313033a2L, 0x32bce23cL, 0x28524bd7L, 0x1f74640cL, 0xc2be5dcL, 0x2ba049e8L, 0x37cc2fc4L, 0x27d1afa5L,
			0x24031562L, 0x1039fb00L, 0x343d1062L, 0x8dc415bL, 0x17e87b6L, 0xa5ac911L, 0xbd950c7L, 0x163419d8L, 0x220d6a9fL,
			0x38418477L, 0x1eb4250fL, 0x1b5adf7fL, 0x3a0f048eL, 0x19cf1a06L, 0x1843548dL, 0x32126e93L, 0xebaf919L, 0x5329da5L,
			0x13ed96beL, 0x19203463L, 0x2d0dcb21L, 0xa93357dL, 0x37a1009eL, 0x6996c14L, 0x29fa2abL, 0x9390ebfL, 0xbd8b16aL,
			0x1511c029L, 0x20ea7193L, 0x35fc31bcL, 0x1b4bd948L, 0x15ad40fdL, 0x30f91a45L, 0xb0b913bL, 0x69e179L, 0xb7572b4L,
			0xbdf542dL, 0x1754c6e1L, 0x23341b0eL, 0x3a88e1efL, 0x222232f6L, 0x21104adeL, 0x797b3cdL, 0x28a7feabL, 0x303fb278L,
			0x1d4ce71cL, 0x11f1cf8dL, 0x2f3eb6a9L, 0x595bc2fL, 0x34d472d8L, 0x3a6a2f07L, 0x33a3d7d8L, 0x32733cd8L, 0x2a7c4aa9L,
			0x2154bd7aL, 0x10363e1cL, 0x318afb96L, 0x6266fabL, 0x37b16b41L, 0x23d10e5L, 0x39ee7c26L, 0x90c304L, 0x3a7f3f2aL,
			0x3b10022eL, 0x39f47751L, 0x3969af78L, 0x37c35cc2L, 0x35924233L, 0x31bad4eeL, 0x2bb24d1aL, 0x21d25801L, 0x11e9db14L,
			0x33bc3315L, 0xa0b4422L, 0x22cad30L, 0xc37f152L, 0xe649e82L, 0x1a9c8fd4L, 0x29012e56L, 0x802f423L, 0x31042279L,
			0x3907169cL, 0x2e706f0eL, 0x2bdcbba3L, 0x1eb260aaL, 0xef45246L, 0x2da6b2f0L, 0x1003b2fL, 0x2ea6ee1fL, 0x2fa7294eL,
			0x22b34d66L, 0x16bfacadL, 0x3972fa13L, 0x1497dcb9L, 0x12700cc5L, 0x2707e97eL, 0x3977f643L, 0x24e515baL, 0x22c241f6L,
			0xc0c8da9L, 0x2ececf9fL, 0x3adb5d48L, 0x2e0f62e0L, 0x2d4ff621L, 0x1fc48efaL, 0x1179bb14L, 0x313e4a0eL, 0x71d3b1bL,
			0x385b8529L, 0x3ddf63dL, 0x9eb15fL, 0x47ca79cL, 0x51b58fbL, 0x9980097L, 0xeb35992L, 0x184b5a29L, 0x26feb3bbL, 0x3af43ddL,
			0x2aadf798L, 0x2e5d3b75L, 0x1d706906L, 0x1032da74L, 0x2da3437aL, 0x23b53e7L, 0x2fde9761L, 0x3219eb48L, 0x265db8a2L,
			0x1cdcd9e3L, 0x79fc87eL, 0x247ca261L, 0x2c1c6adfL, 0x14fe4339L, 0x57fe411L, 0x1a7e274aL, 0x1ffe0b5bL, 0x3a7c32a5L,
			0x1edf73f9L, 0x1dc0dc97L, 0x1058689L, 0x1ec66320L, 0x1fcbe9a9L, 0x2f782c2L, 0x22c36c6bL, 0x25baef2dL, 0xce39191L,
			0x329e80beL, 0x3e74848L, 0x3685c906L, 0x3a6d114eL, 0x3558104dL, 0x342a5794L, 0x2de79ddaL, 0x26772b67L, 0x18c3ff3aL,
			0x3a0609aL, 0x1c645fd4L, 0x2004c06eL, 0xce563bL, 0x20d316a9L, 0x21a16ce4L, 0x6d9b986L, 0x287b266aL, 0x2f54dff0L,
			0x1c353c53L, 0xfef523cL, 0x2c248e8fL, 0x7916c4L, 0x2c9da553L, 0x2d16bc17L, 0x1e199763L, 0xf958973L, 0x2daf20d6L,
			0x1a9e042L, 0x2f590118L, 0x3102e15aL, 0x24c1186bL, 0x1a292fbeL, 0x34f7e22L, 0x1d78ade0L, 0x20c82c02L, 0x2a60fdbL,
			0x236e3bddL, 0x26144bb8L, 0xde7bd8eL, 0x33fc0946L, 0x648fccdL, 0x3a450613L, 0x4f338d9L, 0x39d74e5L, 0x890adbeL,
			0xc2e22a3L, 0x14bed061L, 0x20ecf304L, 0x35abc365L, 0x1afdec62L, 0x150ee5c0L, 0x300cd222L, 0x980eddbL, 0x398dbffdL,
			0x773e3d1L, 0x566d9c7L, 0xcdabd98L, 0x1241975fL, 0x1f1c54f7L, 0x315dec56L, 0x14df7746L, 0xaa29995L, 0x1f8210dbL,
			0x2a24aa70L, 0xe0bf144L, 0x38309bb4L, 0xaa1c2f1L, 0x737949eL, 0x11d9578fL, 0x1910ec2dL, 0x2aea43bcL, 0x86065e2L,
			0x334aa99eL, 0x104579L, 0x335aef17L, 0x336b3490L, 0x2b2b59a0L, 0x22fbc429L, 0x128c53c2L, 0x358817ebL, 0xc79a1a6L,
			0x666ef8aL, 0x12e09130L, 0x194780baL, 0x2c2811eaL, 0x9d4c89dL, 0x35fcda87L, 0x436d91dL, 0x3a33b3a4L, 0x2cfc2baL,
			0x168ac57L, 0x4386f11L, 0x5a11b68L, 0x9d98a79L, 0xf7aa5e1L, 0x1954305aL, 0x28ced63bL, 0x6883c8eL, 0x2f5712c9L,
			0x35df4f57L, 0x299b9819L, 0x23e01d69L, 0x11e0eb7bL, 0x35c108e4L, 0xc072a58L, 0x62d6935L, 0x1234938dL, 0x1861fcc2L,
			0x2a96904fL, 0x75dc30aL, 0x31f45359L, 0x39521663L, 0x2fab9fb5L, 0x2d62ec11L, 0x2173c1bfL, 0x133be3c9L, 0x34afa588L,
			0xc50bf4aL, 0x5659acbL, 0x11b65a15L, 0x171bf4e0L, 0x28d24ef5L, 0x45379ceL, 0x2d25c8c3L, 0x31794291L, 0x2304414dL,
			0x18e2b9d7L, 0x4c311dL, 0x192eeaf4L, 0x197b1c11L, 0x32aa0705L, 0x108a590fL, 0x799960dL, 0x1823ef1cL, 0x1fbd8529L,
			0x37e17445L, 0x1c042f67L, 0x184ad9a5L, 0x344f090cL, 0x10ff18aaL, 0x9b357afL, 0x1ab27059L, 0x2465c808L, 0x37d6e5aL,
			0x27e33662L, 0x2b60a4bcL, 0x17a91117L, 0x76eebccL, 0x1f17fce3L, 0x2686e8afL, 0xa041b8bL, 0x308b043aL, 0x3a8f1fc5L,
			0x2f7f59f8L, 0x2e73afb6L, 0x22583fa7L, 0x15312556L, 0x378964fdL, 0x111fc04cL, 0xd0e5b42L, 0x1e2e1b8eL, 0x2b3c76d0L,
			0xdcfc857L, 0x390c3f27L, 0xb413d77L, 0x8b2b297L, 0x13f3f00eL, 0x1ca6a2a5L, 0x309a92b3L, 0x11a66b51L, 0x6a633fdL,
			0x184c9f4eL, 0x1ef2d34bL, 0x373f7299L, 0x1a977bddL, 0x163c246fL, 0x30d3a04cL, 0xb74fab4L, 0xadd0f9L, 0xc22cbadL,
			0xcd09ca6L, 0x18f36853L, 0x25c404f9L, 0x31ca345L, 0x28e0a83eL, 0x2bfd4b83L, 0x194329baL, 0x9a5ab36L, 0x22e8d4f0L,
			0x2c8e8026L, 0x13dc8b0fL, 0x4d0412eL, 0x18accc3dL, 0x1d7d0d6bL, 0x3629d9a8L, 0x180c1d0cL, 0x129b2cadL, 0x2aa749b9L,
			0x1a7ac5fL, 0x2c4ef618L, 0x2df6a277L, 0x1eaace88L, 0x1106a6f8L, 0x2fb17580L, 0x51d5271L, 0x34cec7f1L, 0x39ec1a62L,
			0x3320184cL, 0x317168a7L, 0x28f6b6ecL, 0x1ecd558cL, 0xc294271L, 0x2af697fdL, 0x371fda6eL, 0x267ba864L, 0x2200b8cbL,
			0xce19728L, 0x2ee24ff3L, 0x291d14L, 0x2f0b6d07L, 0x2f348a1bL, 0x22a52d1bL, 0x163eed2fL, 0x38e41a4aL, 0x13883d72L,
			0x10d18db5L, 0x2459cb27L, 0x352b58dcL, 0x1dea59fcL, 0x177ae8d1L, 0x356542cdL, 0x11456197L, 0xb0fda5dL, 0x1c553bf4L,
			0x27651651L, 0x81f883eL, 0x2f849e8fL, 0x37a426cdL, 0x2b8dfb55L, 0x2797581bL, 0x178a8969L, 0x387177dL, 0x1b11a0e6L,
			0x1e98b863L, 0x39aa5949L, 0x1ca847a5L, 0x1ab7d6e7L, 0x37601e8cL, 0x167d2b6cL, 0x12427ff1L, 0x28bfab5dL, 0x3b022b4eL,
			0x28270ca4L, 0x278e6debL, 0x141ab088L, 0xe546cL, 0x142904f4L, 0x14375960L, 0x28605e54L, 0xfcedadL, 0x295d4c01L,
			0x2a5a39aeL, 0x181cbba8L, 0x6dc2b4fL, 0x1ef8e6f7L, 0x25d51246L, 0x9332f36L, 0x2f08417cL, 0x383b70b2L, 0x2ba8e827L,
			0x28498ed2L, 0x1857acf2L, 0x50671bdL, 0x1d5e1eafL, 0x2264906cL, 0x427e514L, 0x268c7580L, 0x2ab45a94L, 0x15a6060dL,
			0x4bf969aL, 0x1a659ca7L, 0x1f253341L, 0x398acfe8L, 0x1d153922L, 0x1b053f03L, 0x381a7825L, 0x1784ed21L, 0x14049b3fL,
			0x2b898860L, 0x3f35998L, 0x2f7ce1f8L, 0x33703b90L, 0x27525381L, 0x1f27c50aL, 0xadf4e84L, 0x2a07138eL, 0x34e66212L,
			0x2352ab99L, 0x1c9e43a4L, 0x4562536L, 0x20f468daL, 0x254a8e10L, 0xaa42ce3L, 0x2feebaf3L, 0x3a92e7d6L, 0x2ee6d8c2L,
			0x2ddef691L, 0x212b054cL, 0x136f31d6L, 0x349a3722L, 0xc6e9ef1L, 0x56e0c0cL, 0x11dcaafdL, 0x174ab709L, 0x29276206L,
			0x4d74f08L, 0x2dfeb10eL, 0x32d60016L, 0x2539e71dL, 0x1c751d2cL, 0x6143a42L, 0x2289576eL, 0x289d91b0L, 0xf8c1f17L,
			0x3829b0c7L, 0xc1b05d7L, 0x8a9ec97L, 0x14c4f26eL, 0x1d6edf05L, 0x3233d173L, 0x1407e671L, 0xaa0edddL, 0x1ea8d44eL,
			0x2949c22bL, 0xc57cc72L, 0x35a18e9dL, 0x65e9108L, 0x65559eL, 0x6c3e6a6L, 0x7293c44L, 0xded22eaL, 0x15165f2eL,
			0x23038218L, 0x3819e146L, 0x1f829957L, 0x1c01b096L, 0x3b8449edL, 0x1beb307cL, 0x1bd4b062L, 0x37bfe0deL, 0x17f9c739L,
			0x141ede10L, 0x2c18a549L, 0x49cb952L, 0x30b55e9bL, 0x355217edL, 0x2a6cac81L, 0x2423fa67L, 0x12f5dce1L, 0x3719d748L,
			0xe74ea22L, 0x9f3f763L, 0x1868e185L, 0x225cd8e8L, 0x3ac5ba6dL, 0x2187c94eL, 0x20b2b9b4L, 0x69fb8fbL, 0x275272afL,
			0x2df22baaL, 0x19a9d452L, 0xc0135f5L, 0x25ab0a47L, 0x31ac403cL, 0x1bbc807cL, 0x11cdf6b1L, 0x2d8a772dL, 0x3bda3d7L,
			0x31481b04L, 0x3505bedbL, 0x2ab30fd8L, 0x241e04acL, 0x13364a7dL, 0x37544f29L, 0xeefcf9fL, 0xaa954c1L, 0x19992460L,
			0x24427921L, 0x240d37aL, 0x26834c9bL, 0x28c42015L, 0x13aca2a9L, 0xd5f8b7L, 0x14829b60L, 0x15589417L, 0x29db2f77L,
			0x398f987L, 0x2d7428feL, 0x310d2285L, 0x22e6817cL, 0x1858d9faL, 0x3b3f5b76L, 0x17fd6b69L, 0x17a1fcd8L, 0x2f9f6841L,
			0xba69b12L, 0x3b460353L, 0xb51d45eL, 0xafd0daaL, 0x164ee208L, 0x214befb2L, 0x379ad1baL, 0x1d4bf765L, 0x194bff18L,
			0x3697f67dL, 0x14492b8eL, 0xf465804L, 0x238f8392L, 0x32d5db96L, 0x1aca9521L, 0x1205a6b0L, 0x2cd03bd1L, 0x33b187aL,
			0x300b544bL, 0x33466cc5L, 0x27b6f709L, 0x1f6299c7L, 0xb7ec6c9L, 0x2ae16090L, 0x36602759L, 0x25a6bde2L, 0x206c1b34L,
			0xa780f0fL, 0x2ae42a43L, 0x355c3952L, 0x24a5998eL, 0x1e6708d9L, 0x771d860L, 0x25d8e139L, 0x2d4ab999L, 0x1788d0cbL,
			0x938c05dL, 0x20c19128L, 0x29fa5185L, 0xf2118a6L, 0x391b6a2bL, 0xca1b8caL, 0xa2258eeL, 0x16c411b8L, 0x20e66aa6L,
			0x37aa7c5eL, 0x1cf61cfdL, 0x1905cf54L, 0x35fbec51L, 0x1366f19eL, 0xdc813e8L, 0x212f0586L, 0x2ef7196eL, 0x148b54edL,
			0x7e7a454L, 0x1c72f941L, 0x245a9d95L, 0x532cccfL, 0x298d6a64L, 0x2ec03733L, 0x1cb2d790L, 0xfd844bcL, 0x2c8b1c4cL,
			0xc89701L, 0x2d53b34dL, 0x2e1c4a4eL, 0x1fd53394L, 0x1256b3dbL, 0x322be76fL, 0x8e7d143L, 0x3b13b8b2L, 0x860bfeeL,
			0x7d9ae99L, 0x103a6e87L, 0x18141d20L, 0x284e8ba7L, 0x4c7dec0L, 0x2d166a67L, 0x31de4927L, 0x2359e987L, 0x199d68a7L,
			0x15c8827L, 0x1af9f0ceL, 0x1c5678f5L, 0x375069c3L, 0x180c18b1L, 0x13c1b86dL, 0x2bcdd11eL, 0x3f4bf84L, 0x2fc290a2L,
			0x33b75026L, 0x27df16c1L, 0x1ffb9ce0L, 0xc3fe99aL, 0x2c3b867aL, 0x387b7014L, 0x291c2c87L, 0x25fcd294L, 0x137e3514L,
			0x397b07a8L, 0x115e72b5L, 0xf3eb056L, 0x209d230bL, 0x2fdbd361L, 0x14de2c65L, 0x91f35bfL, 0x1dfd6224L, 0x271c97e3L,
			0x97f3000L, 0x309bc7e3L, 0x3a1af7e3L, 0x2f1bf5bfL, 0x2d9c239bL, 0x211d4f53L, 0x131ea8e7L, 0x343bf83aL, 0xbbfd71aL,
			0x461054dL, 0x1020dc67L, 0x1481e1b4L, 0x24a2be1bL, 0x39249fcfL, 0x222c93e3L, 0x1fb669abL, 0x6483387L, 0x25fe9d32L,
			0x2c46d0b9L, 0x16aaa3e4L, 0x756aa96L, 0x1e014e7aL, 0x2557f910L, 0x7be7d83L, 0x2d167693L, 0x34d4f416L, 0x2650a0a2L,
			0x1f8acab1L, 0xa40a14cL, 0x29cb6bfdL, 0x340c0d49L, 0x223caf3fL, 0x1aadf281L, 0x14fd7b9L, 0x1bfdca3aL, 0x1d4da1f3L,
			0x394b6c2dL, 0x1afe4419L, 0x18aee63fL, 0x33ad2a58L, 0x10c14690L, 0x8d3a6e1L, 0x1994ed71L, 0x22689452L, 0x62b7bcL,
			0x22cb4c0eL, 0x232e03caL, 0xa5e85d1L, 0x2d8c899bL, 0x37eb0f6cL, 0x29dccf00L, 0x262d1465L, 0x146f195eL, 0x3a9c2dc3L,
			0x13707d1aL, 0x1271e0d6L, 0x25e25df0L, 0x38543ec6L, 0x229bd2afL, 0x1f55476eL, 0x6565016L, 0x25ab9784L, 0x2c01e79aL,
			0x1612b517L, 0x679d2aaL, 0x1c8c87c1L, 0x23065a6bL, 0x3f81825L, 0x26fe7290L, 0x2af68ab5L, 0x165a333eL, 0x5b5f3ecL,
			0x1c10272aL, 0x21c61b16L, 0x23b7839L, 0x2401934fL, 0x263d0b88L, 0xea3d4d0L, 0x34e0e058L, 0x7e9eb21L, 0x1300172L,
			0x919ec93L, 0xa49ee05L, 0x1363da98L, 0x1dadc89dL, 0x3111a335L, 0x1324a1cbL, 0x89b7af9L, 0x1bc01cc4L, 0x245b97bdL,
			0x480ea7aL, 0x28dc8237L, 0x2d5d6cb1L, 0x1a9f24e1L, 0xc61c78bL, 0x2700ec6cL, 0x3362b3f7L, 0x1ec8d65cL, 0x1690c04cL,
			0x355996a8L, 0x104f8cedL, 0xa0e598eL, 0x1a5de67bL, 0x246c4009L, 0x32f5c7dL, 0x279b9c86L, 0x2acaf903L, 0x16cbcb82L,
			0x5fbfa7eL, 0x1cc7c600L, 0x22c3c07eL, 0x3f0bc77L, 0x26b47cf5L, 0x2aa5396cL, 0x15beec5aL, 0x4c95bbfL, 0x1a884819L,
			0x1f51a3d8L, 0x39d9ebf1L, 0x1d90c5c2L, 0x1bcfe7acL, 0x3960ad6eL, 0x1995cb13L, 0x175bae7aL, 0x30f1798dL, 0xcb25e00L};
	}
}
